//二叉树结点的插入
//二叉树插入的位置就是数据域在二叉树中查找失败的位置

//insert函数将在二叉树中插入一个数据域为x的新结点
//注意根结点指针root要使用引用,否则插入不会成功
void insert(node* &root,int x){
	if(root==NULL){	//空树,说明查找失败,也即插入位置(递归边界)
		root=newNode(x);	//创建新结点,插入
		return ; 
	}
	if(/*由二叉树的性质,x应该插在左子树*/){
		insert(root->lchild,x);	//往左子树搜索(递归式) 
	}else{
		insert(root->rchild,x);	//往右子树搜素(递归式) 
	} 
} 
//注意此处的node * root，对root加了引用
//如果函数中需要新建结点,即对二叉树的结构做出修改,就需要加引用
//如果只是修改当前已有结点的内容,或仅仅是遍历树,就不用加引用 
